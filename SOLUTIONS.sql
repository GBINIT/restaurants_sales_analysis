-- DATA EXPLORATION
SELECT * FROM DELIVERY_PATNER;
SELECT * FROM ORDERS;
SELECT * FROM RATINGS;
SELECT * FROM RESTAURANTS;
SELECT * FROM USERS;

-- Q1.Find total number of users in each city.
SELECT COUNT(*) AS "USER COUNT " , CITY
FROM USERS
GROUP BY CITY; 

-- Q2.Get the count of orders by payment method.
SELECT COUNT(*) AS "ORDER_COUNT" , PAYMENT_METHOD
FROM ORDERS
GROUP BY PAYMENT_METHOD
ORDER BY PAYMENT_METHOD;

-- Q3.List top 5 restaurants by number of orders received along with there name.
SELECT COUNT(O.ORDER_ID) , R.RESTAURANT_NAME 
FROM ORDERS O
JOIN RESTAURANTS R ON O.RESTAURANT_ID = R.RESTAURANT_ID
GROUP BY R.RESTAURANT_NAME 
ORDER BY 1 DESC
LIMIT 5;

-- Q4.Find average delivery time (in minutes) for all orders.
SELECT ROUND(AVG(DELIVERY_TIME_MIN),2) AS "AVG_DELIVERY_TIME"
FROM ORDERS;

-- Q5.Count number of premium vs non-premium users.
SELECT COUNT(*) AS "COUNT OD USERS" , IS_PREMIUM AS "ARE PREMIUM USER"
FROM USERS
GROUP BY IS_PREMIUM

-- Q6.Find top 3 cities with highest total order amount.
SELECT R.CITY , SUM(O.AMOUNT) AS "AMOUNT SPENT"
FROM ORDERS O
JOIN RESTAURANTS R ON O.RESTAURANT_ID = R.RESTAURANT_ID
GROUP BY R.CITY 
ORDER BY 2 DESC
LIMIT 3; 

-- Q7.List delivery partners with average rating > 4.5.
SELECT * 
FROM DELIVERY_PATNER
WHERE RATING >= (SELECT AVG(RATING)
				 FROM DELIVERY_PATNER);

-- Q8.Find the percentage of orders that were cancelled per city.
SELECT COUNT(ORDER_STATUS) AS "Cancelled ORDERS" , U.CITY , ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER() ,2) AS PERCENTAGE
FROM ORDERS O 
JOIN USERS U ON O.USER_ID = U.USER_ID
WHERE O.ORDER_STATUS = 'Cancelled' 
GROUP BY U.CITY;

-- Q9.Show average order amount for each cuisine type.
SELECT ROUND(AVG(O.AMOUNT),2) AS "AVG_AMOUNT" , R.CUISINE
FROM ORDERS O
JOIN RESTAURANTS R ON O.RESTAURANT_ID = R.RESTAURANT_ID 
GROUP BY R.CUISINE;

-- Q10.Find most preferred payment method among premium users.
SELECT COUNT(*) , PAYMENT_METHOD
FROM USERS U 
JOIN ORDERS O ON U.USER_ID = O.USER_ID
WHERE U.IS_PREMIUM = TRUE
GROUP BY O.PAYMENT_METHOD
ORDER BY 1 DESC

-- HARD 
-- Q11.Find Top 3 Restaurants Per City by Revenue
WITH CITY_REVENUE AS (
	SELECT R.CITY , R.RESTAURANT_NAME , SUM(O.AMOUNT) AS TOTAL_AMT
	FROM ORDERS O
	JOIN RESTAURANTS R ON O.RESTAURANT_ID = R.RESTAURANT_ID 
	GROUP BY 1 , 2
),
RANKED_REVENUE AS (
	SELECT CITY , RESTAURANT_NAME , TOTAL_AMT ,
	RANK() OVER(PARTITION BY CITY 
				ORDER BY TOTAL_AMT DESC)
	AS RANK_CITY
FROM CITY_REVENUE
)
SELECT *
FROM RANKED_REVENUE 
WHERE RANK_CITY <= 3;

-- Q12.Identify Users Who Spend Above Average
WITH USER_SPEND AS (
    SELECT USER_ID, SUM(AMOUNT) AS TOTAL_SPEND
    FROM ORDERS
    GROUP BY USER_ID
)
SELECT U.USER_ID, U.NAME, US.TOTAL_SPEND
FROM USER_SPEND US
JOIN USERS U ON US.USER_ID = U.USER_ID
WHERE US.TOTAL_SPEND >= (
    SELECT AVG(TOTAL_SPEND) FROM USER_SPEND
)
ORDER BY US.TOTAL_SPEND DESC;

-- Q13.Average Delivery Time by Partner with Deviation
WITH AVG_TIME_PER_PATNER AS (
	SELECT PARTNER_NAME,
	AVG(O.DELIVERY_TIME_MIN) AS AVG_DELIVERY_TIME
	FROM DELIVERY_PATNER DP 
	JOIN ORDERS O ON DP.PARTNER_ID = O.PARTNER_ID
	GROUP BY PARTNER_NAME
),
GLOBAL_AVG AS (
	SELECT ROUND(AVG(DELIVERY_TIME_MIN),2) AS OVERALL_AVG
	FROM ORDERS
)
SELECT P.PARTNER_NAME , 
		P.AVG_DELIVERY_TIME,
		G.OVERALL_AVG,
		ROUND(P.AVG_DELIVERY_TIME - OVERALL_AVG) AS DEVIATION
FROM AVG_TIME_PER_PATNER P
CROSS JOIN GLOBAL_AVG G;
		







